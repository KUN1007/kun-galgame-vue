{"version":3,"sources":["Socket.js"],"names":["ee","Symbol","for","UppySocket","constructor","opts","e","message","JSON","parse","data","emit","action","payload","err","console","log","autoOpen","open","isOpen","WebSocket","target","onopen","length","first","shift","send","onclose","onmessage","close","push","stringify","on","handler","once"],"mappings":";;;;;;;;;;MAAOA,E;;;;;;;;;;;;cAqBJC,MAAM,CAACC,GAAP,CAAW,sBAAX,C;eAEAD,MAAM,CAACC,GAAP,CAAW,sBAAX,C;;AArBY,MAAMC,UAAN,CAAiB;AAS9BC,EAAAA,WAAW,CAAEC,IAAF,EAAQ;AAAA;AAAA;AAAA,aART;AAQS;AAAA;AAAA;AAAA,aANRL,EAAE;AAMM;AAAA;AAAA;AAAA,aAJT;AAIS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aA+DDM,CAAD,IAAO;AACtB,YAAI;AACF,gBAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,CAAC,CAACI,IAAb,CAAhB;AACA,eAAKC,IAAL,CAAUJ,OAAO,CAACK,MAAlB,EAA0BL,OAAO,CAACM,OAAlC;AACD,SAHD,CAGE,OAAOC,GAAP,EAAY;AACZ;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EAFY,CAEK;AAClB;AACF;AAvEkB;AACjB,SAAKT,IAAL,GAAYA,IAAZ;;AAEA,QAAI,CAACA,IAAD,IAASA,IAAI,CAACY,QAAL,KAAkB,KAA/B,EAAsC;AACpC,WAAKC,IAAL;AACD;AACF;;AAES,MAANC,MAAM,GAAI;AAAE,uCAAO,IAAP;AAAqB;;AAErC,kBAAwC;AAAE,uCAAO,IAAP;AAAqB;;AAE/D,mBAAwC;AAAE,uCAAO,IAAP;AAAqB;;AAE/DD,EAAAA,IAAI,GAAI;AACN,0DAAe,IAAIE,SAAJ,CAAc,KAAKf,IAAL,CAAUgB,MAAxB,CAAf;;AAEA,wDAAaC,MAAb,GAAsB,MAAM;AAC1B,4DAAe,IAAf;;AAEA,aAAO,oDAAaC,MAAb,GAAsB,CAAtB,gCAA2B,IAA3B,mBAAP,EAAgD;AAC9C,cAAMC,KAAK,GAAG,oDAAaC,KAAb,EAAd;;AACA,aAAKC,IAAL,CAAUF,KAAK,CAACZ,MAAhB,EAAwBY,KAAK,CAACX,OAA9B;AACD;AACF,KAPD;;AASA,wDAAac,OAAb,GAAuB,MAAM;AAC3B,4DAAe,KAAf;AACD,KAFD;;AAIA,wDAAaC,SAAb,+BAAyB,IAAzB;AACD;;AAEDC,EAAAA,KAAK,GAAI;AAAA;;AACP,2HAAcA,KAAd;AACD;;AAEDH,EAAAA,IAAI,CAAEd,MAAF,EAAUC,OAAV,EAAmB;AACrB;AAEA,QAAI,6BAAC,IAAD,mBAAJ,EAAmB;AACjB,0DAAaiB,IAAb,CAAkB;AAAElB,QAAAA,MAAF;AAAUC,QAAAA;AAAV,OAAlB;;AACA;AACD;;AAED,wDAAaa,IAAb,CAAkBlB,IAAI,CAACuB,SAAL,CAAe;AAC/BnB,MAAAA,MAD+B;AAE/BC,MAAAA;AAF+B,KAAf,CAAlB;AAID;;AAEDmB,EAAAA,EAAE,CAAEpB,MAAF,EAAUqB,OAAV,EAAmB;AACnB,0DAAcD,EAAd,CAAiBpB,MAAjB,EAAyBqB,OAAzB;AACD;;AAEDtB,EAAAA,IAAI,CAAEC,MAAF,EAAUC,OAAV,EAAmB;AACrB,0DAAcF,IAAd,CAAmBC,MAAnB,EAA2BC,OAA3B;AACD;;AAEDqB,EAAAA,IAAI,CAAEtB,MAAF,EAAUqB,OAAV,EAAmB;AACrB,0DAAcC,IAAd,CAAmBtB,MAAnB,EAA2BqB,OAA3B;AACD;;AAtE6B;;iBAAX9B,U","sourcesContent":["import ee from 'namespace-emitter'\n\nexport default class UppySocket {\n  #queued = []\n\n  #emitter = ee()\n\n  #isOpen = false\n\n  #socket\n\n  constructor (opts) {\n    this.opts = opts\n\n    if (!opts || opts.autoOpen !== false) {\n      this.open()\n    }\n  }\n\n  get isOpen () { return this.#isOpen }\n\n  [Symbol.for('uppy test: getSocket')] () { return this.#socket }\n\n  [Symbol.for('uppy test: getQueued')] () { return this.#queued }\n\n  open () {\n    this.#socket = new WebSocket(this.opts.target)\n\n    this.#socket.onopen = () => {\n      this.#isOpen = true\n\n      while (this.#queued.length > 0 && this.#isOpen) {\n        const first = this.#queued.shift()\n        this.send(first.action, first.payload)\n      }\n    }\n\n    this.#socket.onclose = () => {\n      this.#isOpen = false\n    }\n\n    this.#socket.onmessage = this.#handleMessage\n  }\n\n  close () {\n    this.#socket?.close()\n  }\n\n  send (action, payload) {\n    // attach uuid\n\n    if (!this.#isOpen) {\n      this.#queued.push({ action, payload })\n      return\n    }\n\n    this.#socket.send(JSON.stringify({\n      action,\n      payload,\n    }))\n  }\n\n  on (action, handler) {\n    this.#emitter.on(action, handler)\n  }\n\n  emit (action, payload) {\n    this.#emitter.emit(action, payload)\n  }\n\n  once (action, handler) {\n    this.#emitter.once(action, handler)\n  }\n\n  #handleMessage = (e) => {\n    try {\n      const message = JSON.parse(e.data)\n      this.emit(message.action, message.payload)\n    } catch (err) {\n      // TODO: use a more robust error handler.\n      console.log(err) // eslint-disable-line no-console\n    }\n  }\n}\n"]}