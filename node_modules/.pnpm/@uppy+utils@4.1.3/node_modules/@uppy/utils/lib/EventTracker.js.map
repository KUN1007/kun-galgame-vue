{"version":3,"sources":["EventTracker.js"],"names":["EventTracker","constructor","emitter","on","event","fn","push","remove","splice","off"],"mappings":";;;;;;;;;;;;AAIe,MAAMA,YAAN,CAAmB;AAKhCC,EAAAA,WAAW,CAAEC,OAAF,EAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFZ;AAEY;AACpB,4DAAgBA,OAAhB;AACD;;AAEDC,EAAAA,EAAE,CAAEC,KAAF,EAASC,EAAT,EAAa;AACb,wDAAaC,IAAb,CAAkB,CAACF,KAAD,EAAQC,EAAR,CAAlB;;AACA,WAAO,sDAAcF,EAAd,CAAiBC,KAAjB,EAAwBC,EAAxB,CAAP;AACD;;AAEDE,EAAAA,MAAM,GAAI;AACR,SAAK,MAAM,CAACH,KAAD,EAAQC,EAAR,CAAX,IAA0B,oDAAaG,MAAb,CAAoB,CAApB,CAA1B,EAAkD;AAChD,4DAAcC,GAAd,CAAkBL,KAAlB,EAAyBC,EAAzB;AACD;AACF;;AAlB+B;;AAJlC;AACA;AACA;AACA;iBACqBL,Y","sourcesContent":["/**\n * Create a wrapper around an event emitter with a `remove` method to remove\n * all events that were added using the wrapped emitter.\n */\nexport default class EventTracker {\n  #emitter\n\n  #events = []\n\n  constructor (emitter) {\n    this.#emitter = emitter\n  }\n\n  on (event, fn) {\n    this.#events.push([event, fn])\n    return this.#emitter.on(event, fn)\n  }\n\n  remove () {\n    for (const [event, fn] of this.#events.splice(0)) {\n      this.#emitter.off(event, fn)\n    }\n  }\n}\n"]}