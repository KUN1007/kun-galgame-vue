{"version":3,"sources":["ProgressTimeout.js"],"names":["ProgressTimeout","constructor","timeout","timeoutHandler","progress","clearTimeout","setTimeout","done"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,eAAN,CAAsB;AASpBC,EAAAA,WAAW,CAAEC,OAAF,EAAWC,cAAX,EAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAN5B;AAM4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACpC,4DAAgBD,OAAhB;AACA,kEAAmBC,cAAnB;AACD;;AAEDC,EAAAA,QAAQ,GAAI;AACV;AACA;AACA;AACA,oCAAI,IAAJ,qBAAkB;;AAElB,QAAI,wDAAgB,CAApB,EAAuB;AACrBC,MAAAA,YAAY,6BAAC,IAAD,4BAAZ;AACA,oEAAmBC,UAAU,6BAAC,IAAD,yDAAmB,IAAnB,sBAA7B;AACD;AACF;;AAEDC,EAAAA,IAAI,GAAI;AACN,QAAI,6BAAC,IAAD,mBAAJ,EAAmB;AACjBF,MAAAA,YAAY,6BAAC,IAAD,4BAAZ;AACA,oEAAmB,IAAnB;AACA,4DAAe,IAAf;AACD;AACF;;AAhCmB;;iBAmCPL,e","sourcesContent":["/**\n * Helper to abort upload requests if there has not been any progress for `timeout` ms.\n * Create an instance using `timer = new ProgressTimeout(10000, onTimeout)`\n * Call `timer.progress()` to signal that there has been progress of any kind.\n * Call `timer.done()` when the upload has completed.\n */\nclass ProgressTimeout {\n  #aliveTimer\n\n  #isDone = false\n\n  #onTimedOut\n\n  #timeout\n\n  constructor (timeout, timeoutHandler) {\n    this.#timeout = timeout\n    this.#onTimedOut = timeoutHandler\n  }\n\n  progress () {\n    // Some browsers fire another progress event when the upload is\n    // cancelled, so we have to ignore progress after the timer was\n    // told to stop.\n    if (this.#isDone) return\n\n    if (this.#timeout > 0) {\n      clearTimeout(this.#aliveTimer)\n      this.#aliveTimer = setTimeout(this.#onTimedOut, this.#timeout)\n    }\n  }\n\n  done () {\n    if (!this.#isDone) {\n      clearTimeout(this.#aliveTimer)\n      this.#aliveTimer = null\n      this.#isDone = true\n    }\n  }\n}\n\nexport default ProgressTimeout\n"]}