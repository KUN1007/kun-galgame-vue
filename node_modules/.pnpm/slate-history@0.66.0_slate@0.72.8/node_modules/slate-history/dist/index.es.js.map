{"version":3,"file":"index.es.js","sources":["../src/history.ts","../src/history-editor.ts","../src/with-history.ts"],"sourcesContent":["import { isPlainObject } from 'is-plain-object'\nimport { Operation } from 'slate'\n\n/**\n * `History` objects hold all of the operations that are applied to a value, so\n * they can be undone or redone as necessary.\n */\n\nexport interface History {\n  redos: Operation[][]\n  undos: Operation[][]\n}\n\nexport const History = {\n  /**\n   * Check if a value is a `History` object.\n   */\n\n  isHistory(value: any): value is History {\n    return (\n      isPlainObject(value) &&\n      Array.isArray(value.redos) &&\n      Array.isArray(value.undos) &&\n      (value.redos.length === 0 || Operation.isOperationList(value.redos[0])) &&\n      (value.undos.length === 0 || Operation.isOperationList(value.undos[0]))\n    )\n  },\n}\n","import { BaseEditor, Editor } from 'slate'\nimport { History } from './history'\n\n/**\n * Weakmaps for attaching state to the editor.\n */\n\nexport const HISTORY = new WeakMap<Editor, History>()\nexport const SAVING = new WeakMap<Editor, boolean | undefined>()\nexport const MERGING = new WeakMap<Editor, boolean | undefined>()\n\n/**\n * `HistoryEditor` contains helpers for history-enabled editors.\n */\n\nexport interface HistoryEditor extends BaseEditor {\n  history: History\n  undo: () => void\n  redo: () => void\n}\n\nexport const HistoryEditor = {\n  /**\n   * Check if a value is a `HistoryEditor` object.\n   */\n\n  isHistoryEditor(value: any): value is HistoryEditor {\n    return History.isHistory(value.history) && Editor.isEditor(value)\n  },\n\n  /**\n   * Get the merge flag's current value.\n   */\n\n  isMerging(editor: HistoryEditor): boolean | undefined {\n    return MERGING.get(editor)\n  },\n\n  /**\n   * Get the saving flag's current value.\n   */\n\n  isSaving(editor: HistoryEditor): boolean | undefined {\n    return SAVING.get(editor)\n  },\n\n  /**\n   * Redo to the previous saved state.\n   */\n\n  redo(editor: HistoryEditor): void {\n    editor.redo()\n  },\n\n  /**\n   * Undo to the previous saved state.\n   */\n\n  undo(editor: HistoryEditor): void {\n    editor.undo()\n  },\n\n  /**\n   * Apply a series of changes inside a synchronous `fn`, without merging any of\n   * the new operations into previous save point in the history.\n   */\n\n  withoutMerging(editor: HistoryEditor, fn: () => void): void {\n    const prev = HistoryEditor.isMerging(editor)\n    MERGING.set(editor, false)\n    fn()\n    MERGING.set(editor, prev)\n  },\n\n  /**\n   * Apply a series of changes inside a synchronous `fn`, without saving any of\n   * their operations into the history.\n   */\n\n  withoutSaving(editor: HistoryEditor, fn: () => void): void {\n    const prev = HistoryEditor.isSaving(editor)\n    SAVING.set(editor, false)\n    fn()\n    SAVING.set(editor, prev)\n  },\n}\n","import { Editor, Operation, Path } from 'slate'\n\nimport { HistoryEditor } from './history-editor'\n\n/**\n * The `withHistory` plugin keeps track of the operation history of a Slate\n * editor as operations are applied to it, using undo and redo stacks.\n *\n * If you are using TypeScript, you must extend Slate's CustomTypes to use\n * this plugin.\n *\n * See https://docs.slatejs.org/concepts/11-typescript to learn how.\n */\n\nexport const withHistory = <T extends Editor>(editor: T) => {\n  const e = editor as T & HistoryEditor\n  const { apply } = e\n  e.history = { undos: [], redos: [] }\n\n  e.redo = () => {\n    const { history } = e\n    const { redos } = history\n\n    if (redos.length > 0) {\n      const batch = redos[redos.length - 1]\n\n      HistoryEditor.withoutSaving(e, () => {\n        Editor.withoutNormalizing(e, () => {\n          for (const op of batch) {\n            e.apply(op)\n          }\n        })\n      })\n\n      history.redos.pop()\n      history.undos.push(batch)\n    }\n  }\n\n  e.undo = () => {\n    const { history } = e\n    const { undos } = history\n\n    if (undos.length > 0) {\n      const batch = undos[undos.length - 1]\n\n      HistoryEditor.withoutSaving(e, () => {\n        Editor.withoutNormalizing(e, () => {\n          const inverseOps = batch.map(Operation.inverse).reverse()\n\n          for (const op of inverseOps) {\n            e.apply(op)\n          }\n        })\n      })\n\n      history.redos.push(batch)\n      history.undos.pop()\n    }\n  }\n\n  e.apply = (op: Operation) => {\n    const { operations, history } = e\n    const { undos } = history\n    const lastBatch = undos[undos.length - 1]\n    const lastOp = lastBatch && lastBatch[lastBatch.length - 1]\n    const overwrite = shouldOverwrite(op, lastOp)\n    let save = HistoryEditor.isSaving(e)\n    let merge = HistoryEditor.isMerging(e)\n\n    if (save == null) {\n      save = shouldSave(op, lastOp)\n    }\n\n    if (save) {\n      if (merge == null) {\n        if (lastBatch == null) {\n          merge = false\n        } else if (operations.length !== 0) {\n          merge = true\n        } else {\n          merge = shouldMerge(op, lastOp) || overwrite\n        }\n      }\n\n      if (lastBatch && merge) {\n        if (overwrite) {\n          lastBatch.pop()\n        }\n\n        lastBatch.push(op)\n      } else {\n        const batch = [op]\n        undos.push(batch)\n      }\n\n      while (undos.length > 100) {\n        undos.shift()\n      }\n\n      if (shouldClear(op)) {\n        history.redos = []\n      }\n    }\n\n    apply(op)\n  }\n\n  return e\n}\n\n/**\n * Check whether to merge an operation into the previous operation.\n */\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return true\n  }\n\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  return false\n}\n\n/**\n * Check whether an operation needs to be saved to the history.\n */\n\nconst shouldSave = (op: Operation, prev: Operation | undefined): boolean => {\n  if (\n    op.type === 'set_selection' &&\n    (op.properties == null || op.newProperties == null)\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * Check whether an operation should overwrite the previous one.\n */\n\nconst shouldOverwrite = (\n  op: Operation,\n  prev: Operation | undefined\n): boolean => {\n  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {\n    return true\n  }\n\n  return false\n}\n\n/**\n * Check whether an operation should clear the redos stack.\n */\n\nconst shouldClear = (op: Operation): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n"],"names":["History","isHistory","value","isPlainObject","Array","isArray","redos","undos","length","Operation","isOperationList","HISTORY","WeakMap","SAVING","MERGING","HistoryEditor","isHistoryEditor","history","Editor","isEditor","isMerging","editor","get","isSaving","redo","undo","withoutMerging","fn","prev","set","withoutSaving","withHistory","e","apply","batch","withoutNormalizing","op","pop","push","inverseOps","map","inverse","reverse","operations","lastBatch","lastOp","overwrite","shouldOverwrite","save","merge","shouldSave","shouldMerge","shift","shouldClear","type","offset","text","Path","equals","path","properties","newProperties"],"mappings":"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"}